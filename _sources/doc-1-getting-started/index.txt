.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Logika Documentation
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   Getting Started
   </b></big></big></big></big>
   </font>

.. highlight:: bash

.. _getting-started:

Getting Started
###############

System Requirements
*******************

Logika runs on 64-bit OS X, Linux, and Windows operating systems
(tested on OS X 10.11, Ubuntu 14.04, and Windows 10).

On all systems, it requires the following tools:
`git <https://git-scm.com>`__, ``bash``, ``unzip``, ``wget``.

These tools are available on most Linux distributions.

On OS X, you can install ``wget`` using
`MacPorts <https://www.macports.org>`__::

    sudo port install wget

or `Homebrew <http://brew.sh>`__::

    brew install wget

On Windows, it is best to install `MSYS2 <https://msys2.github.io>`__ (64-bit)
and use its MSYS2 shell to install the above tools as follows
(open MSYS2 shell from the Windows start menu's MSYS2 64bit group)::

   pacman -S git unzip wget


Installing and Running Logika
*****************************

To install Logika, enter the following commands under ``bash``::

   git clone https://github.com/sireum/v3.git sireum-v3
   sireum-v3/sireum logika

The first command clones the `Sireum v3 Git repository <https://github.com/sireum/v3>`__
locally to a directory named ``sireum-v3``,
and the second command runs Sireum Logika from the local repository.

If this is your first time running Logika, it first downloads
`some software <https://github.com/sireum/v3#running-sireum>`__
that it depends on, and then
`builds <https://github.com/sireum/v3#building-and-testing-sireum-using-sbt>`__
and `assembles <https://github.com/sireum/v3#assembling-sireum-jar>`__
itself.

The process may take a while depending on your internet connection speed and
your machine's computational prowess.
When it finishes, Logika will display its usage information::

    Sireum Logika -- A Natural Deduction Proof Checker
    ... for Propositional, Predicate, and Programming Logic

    Usage: sireum logika [option] <filename-1> ... <filename-N>

    Options:
    -a, --auto       Enable auto mode (programming logic)
    -l, --last       Check last program only
    -s, --sequent    Sequent matching the propositional/predicate logic input file's
    -t, --timeout    Timeout for algebra and auto (in milliseconds)
                       Default: 2000
        --sat        Enable sat checking of facts and contracts
        --server     Enable server mode
    -h, --help       Display usage information


Please refer to :ref:`cli-configuration` for descriptions on the above option switches.

.. note::

   For the remainder of this document, we use ``logika`` as a shorthand for
   ``sireum-v3/sireum logika``. You can introduce a ``bash`` alias for it as follows::

       alias logika="$(cd "$(dirname sireum-v3/sireum)" && pwd)/$(basename sireum-v3/sireum) logika"

Running Examples
****************

Some Logika examples are available at https://github.com/sireum/v3-logika-examples

Clone the repository to try out some of the examples::

    git clone https://github.com/sireum/v3-logika-examples.git logika-examples

Then run Logika on, e.g., ``logika-examples/src/propositional/intro-nat-ded.logika``,
whose content is as follows::

    p ∨ q, r  ⊢  (p ∧ r) ∨ (q ∧ r)
    {
      1. p ∨ q                    premise
      2. r                        premise
      3. {
           4. p                   assume
           5. p ∧ r               ∧i 4 2
           6. (p ∧ r) ∨ (q ∧ r)   ∨i1 5
         }
      7. {
           8. q                   assume
           9. q ∧ r               ∧i 8 2
          10. (p ∧ r) ∨ (q ∧ r)   ∨i2 9
         }
     11. (p ∧ r) ∨ (q ∧ r)        ∨e 1 3 7
    }

using the following command::

    logika logika-examples/src/propositional/intro-nat-ded.logika

which will show::

    Propositional logic proof is accepted.

If one introduced a typo in the proof, such as using ∨i1 instead of ∨i2 in step #10 in the above example,
Logika will instead output::

    [13, 10] The disjunction's left sub-expression in step #9 does not match #8 for Or-intro1.
    Propositional logic proof is rejected.

One can specify the sequent to prove as a command line to ensure that the proof in the file is
the one that is expected as follows (if you introduced the typo, revert it back first)::

    logika -s "¬(¬p ∨ ¬q) ⊢ p ∧ q" logika-examples/src/propositional/intro-nat-ded.logika

If the provided sequent is different than the one in the file, the tool rejects it.
For example::

    logika -s -s "p, q ⊢ p ∧ q" logika-examples/src/propositional/intro-nat-ded.logika

will result::

    The specified sequent is different than the one in the file.
    Specified:
    p, q ⊢ p ∧ q
    File:
    p ∨ q, r  ⊢  (p ∧ r) ∨ (q ∧ r)

You can run all of the programming logic examples as follows::

    for i in logika-examples/src/programming/*.logika; do echo "Checking ${i}"; logika "${i}"; done

.. _cli-configuration:

Logika Command-Line Configuration
*********************************

Logika automatically detects which logic input it is being asked to check;
thus, there is no configuration switch needed for it.

Auto Mode (``-a`` or ``--auto``)
======================s==========

The auto mode enables :ref:`auto justification/tactic <auto>`
for deducing claims.
It also enables Logika to try to automatically prove
contracts (e.g., assertions, pre/post-conditions, invariants) and
runtime error checks (e.g., division by zero, sequence indexing).

An error message is produced when the auto tactic is used without
enabling this mode.
Moreover, Logika will produce an error message if it cannot
automatically prove a contract or a runtime error check
(in which case, one can increase the :ref:`timeout <timeout>`
for automatic proving, or help Logika by establishing more
claims to help with making the necessary deduction).

Last Mode (``-l`` or ``--last``)
================================

Logika supports checking multiple files at the same time.

For propositional/predicate logics, it treats each file
as a separate proof.

For programming logic, it treats the specified input files
as one input appended together in order.
When last mode is enabled, it only checks the proof of the
last specified file (note that it still, for example,
type checks all the files).
This is handy for proof management by separating a program
of a system into multiple files.

Sequent (``-s`` or ``--sequent``)
=================================

The sequent option is use to provide the sequent
(as the following string argument to the option switch)
that a file should provide a proof for.
This provides a redundancy check at the command-line level to
ensure some sort of consistency.

.. _timeout:

Timeout (``-t`` or ``--timeout``)
=================================

Logika uses the Z3 theorem prover to automatically prove
some formulae (e.g., arithmetic).
In some cases, Z3 might take a long time, thus,
the timeout option specifies how long Z3 can spend to
prove a claim.

Satisfiability Checking Mode (``--sat``)
========================================

If enabled, Logika will check the satisfiability of
contracts and facts (axioms) to ensure that
the system is implementable (or not broken by
assuming untrue facts).
