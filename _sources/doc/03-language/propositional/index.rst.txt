.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Logika Documentation &mdash; <a href="../index.html">3. The Logika Formal Input Language</a>
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   3.2. Propositional Logic
   </b></big></big></big></big>
   </font>

.. _propositional-language:

Propositional Logic
*******************

**Propositional Logic Input Language Grammar**

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 1

The propositional logic input language consists of two main parts:
(1) a sequent, which is followed by (2) a proof of the
sequent.

We will show examples later, but an example input has been shown
in the :ref:`logika-examples` section.

Sequent
=======

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 3-11

A sequent consists of premises (optional) and
conclusions that are separated either by a turnstile
``⊢`` or a horizontal line (``HLINE``) of three or more dashes (``-``).
In the former, each premises and conclusions is
separated by a comma ``,``; the latter separates them using
whitespaces (newlines are considered as whitespaces inside
sequents).

Here is an example sequent written using the turnstile notation.

.. literalinclude:: propositional-1a.logika
   :language: none
   :lines: 1

An equivalent sequent to that written using the horizontal line
notation is as follows.

.. literalinclude:: propositional-1b.logika
   :language: none
   :lines: 1-3

Either way to express yourself is fine.

Proof
=====

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 13-28

A proof consists of a sequence of proof steps delimited by curly braces
``{`` ... ``}``; the proof steps should be separated by newline(s).

Each proof step in the whole proof should be *uniquely*
``NUM``\ bered (but can be out of order), and it is either:
(a) a regular proof step (atomic), or (b) a sub-proof (composite).
(Regular step number ``rNUM`` and sub-proof number ``sNUM`` are
``NUM`` :ref:`literals <ops-literals>`, but distinguished here to
increase readability of the
:ref:`justification grammar where one applies some inference rules later <prop-rules>`.)


In addition to its unique number, a regular proof step consists of a
claim expression, followed by a :ref:`justification <prop-rules>` --
a valid application of one of propositional logic
:ref:`inference rules <prop-rules>` to deduce the claim.
A sub-proof in the propositional logic language starts with an assumption
(``assume`` justification) that is also a regular proof step with a claim expression,
followed by zero or more proof steps (they are delimited inside
``{`` ... ``}`` similar to a proof); the steps, including the assumption,
should be separated by newline(s).

Here is an example proof of the above sequent: ``p → r,  q → r  ⊢  (p ∨ q) → r``.

.. literalinclude:: propositional-1a.logika
   :language: none
   :lines: 2-

Steps ``1``, ``2``, ``7``, ``10``, ``11``, and ``12`` are regular proof steps;
steps ``4``, ``6``, and ``9`` are assumptions; and ``3``, ``5``, and ``8`` are
sub-proofs, where ``5`` and ``8`` are nested inside ``3``.

.. _scoping:

Proof Scoping Rules
===================

When applying an :ref:`inference rule <prop-rules>` to justify a proof step,
one can refer to proof step numbers preceeding it
(i.e., in the order of appearance instead of by their number ordering)
in the same level of ``{`` ... ``}``
(e.g., ``11`` refers to ``4``, ``5``, and ``8``)
or at the preeceding step numbers in any of its outer ``{`` ... ``}`` layers
(e.g., ``7`` refers ``1``).
As a non-example, step ``10`` cannot refer to step ``7`` to deduce its claim.

Hence, the scoping rules are similar to variable declaration-usage scoping rules
in various programming languages such as Scala or Java, where
(with the exception that, again, each proof step number is unique throughout
the whole proof, for clarity sake).

.. _schematic-pattern:

Proof Schematic Pattern
=======================

The discussion on :ref:`justification and inference rules <prop-rules>`
uses the following schematic pattern rule and notation.

Consider the situation at a regular proof step numbered ``Z`` whose
claim expression is ``R``,
where ``Z`` applies an inference rule ``I`` to deduce ``R``,
and ``I`` requires some claim arguments that can be retrieved from
other proof steps, say, numbered ``Y`` and ``Z``.
The notation is as follows::

    X. …
    Y. …
    Z. R    I X Y


In this notation, ``X`` and ``Y`` could be the same proof step,
do not have be next to each other, out of order,
and/or in the same or outer :ref:`scope <scoping>` layers of ``Z``.

When curly braces are explicitly listed, however,
it means that the scope of proof steps are the same.
For example::

    X. {
         X1. …
         …
         XK. …
         …
       }
    Z. R    I X

In this case, ``X1`` and ``XK`` have to be in same level and they indicate a prefix sequence of
proof steps of ``X``.

.. _prop-claim:

Claim Expression
================

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 30-37

The claim boolean expression language in propositional logic is rather small; it
consists of boolean literals, variable reference (identifier),
parenthesized expression, one unary expression (negation),
and and/or/imply binary expressions;
they are listed in decreasing order of precedence (i.e., first is highest) that
is inline with the precedence ordering specified in the :ref:`ops-literals` section.
Note that variables do not need to be explicitly declared nor typed (they are booleans)
in the propositional input language.

Newlines in Expression
----------------------

One newline separator can be inserted after a binary expression operator.
For example, ``P ∧ Q`` is the same as::

    P ∧
      Q

but::

    P ∧

      Q

where the expressions are separated by more than one newlines, are not
because they considered as two separate expressions.

However, newlines are ignored when they appear inside parenthesis.
That is::

    (P ∧

       Q)


is the same as ``P ∧ Q``

These rules follow
`Scala's line-orientation <http://www.scala-lang.org/files/archive/spec/2.11/01-lexical-syntax.html>`__
(follow the link to see more examples).

.. _structural-eq:

Expression Equivalence (``≡``)
------------------------------

Logika's propositional logic reasoning mainly uses structural equivalence
(``≡``) that determines equality of two expressions ``E1`` and ``E2``
(i.e., ``E1 ≡ E2``) based on whether they have the same structure/form.

A parenthesized expression is structurally (and semantically)
equivalent to the expression it contains;
it is only used as a means to override operator precedences.
In other words, for any Logika expression ``E``, ``E ≡ (E)``.
This equivalence holds even for programming logic expressions.

.. _prop-rules:

Justification and Inference Rules
=================================

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 39-51

Each regular proof step should justify the deduction that it makes
to derive its claim by applying some inference rules.
This section summarizes Logika's rendition of propositional logic
natural deduction rules that are intuitively described in
:ref:`propositional-logic`.

The subsequent discussion for each inference rules assumes that
it is being applied at a regular proof step numbered ``Z``
and whose claim expression that it deduces is ``R``.


Premise
-------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 39

The ``premise`` justification can be used to call on one of the
sequent's premises associated with the proof.
That is, ``R`` has to be one of the sequent's premises.
For example,

.. literalinclude:: premise-1.logika
   :language: none

In this case, ``R`` is ``q`` (``R ≡ q``) and
proof step ``1`` (``Z ≡ 1``) uses ``premise`` to deduce its
claim ``q``, which is exactly the second sequent's premise.

The ``premise`` justification can also be used to conjure ``⊤`` (true).
For example, here is the shortest sequent proof in Logika.

.. literalinclude:: premise-2.logika
   :language: none

In this example, ``Z ≡ 1`` and ``R ≡ ⊤``.
There is no premise in the sequent needed to
justify for ``⊤``; one can always depend on ``⊤`` to be true
to its true self.

And-Introduction (∧i)
---------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 40

The ∧i rule requires two arguments, which are regular proof step
numbers (``rNUM``\ s).

Here is a schematic pattern for valid inference using ∧i:

.. literalinclude:: and-intro-pattern.txt
   :language: none
   :caption: **And-Introduction (∧i) Schematic Pattern**
   :name: and-intro-pattern

For example,

.. literalinclude:: and-intro-1.logika
   :language: none

In this case, the pattern is instantiated with
``X ≡ Y ≡ 2``, ``P ≡ Q ≡ ⊤``, ``Z ≡ 1``, and ``R ≡ ⊤ ∧ ⊤``.

Another example,

.. literalinclude:: and-intro-2.logika
   :language: none

In this example, ``X ≡ 2``, ``P ≡ p``, ``Y ≡ 1``, ``Q ≡ q``,
``Z ≡ 3``, and ``R ≡ p ∧ q``.

One last example,

.. literalinclude:: and-intro-2.logika
   :language: none

In this case, ``X ≡ 1``, ``P ≡ q``, ``Y ≡ 2``, ``Q ≡ p``,
``Z ≡ 3``, and ``R ≡ q ∧ p``.

The rest of this section assumes that one already "groks"
the basics of schematic pattern by now.
Hence, the subsequent is without examples and
only discusses new concepts and Logika nuances that enhance
the natural deduction rules described
in :ref:`propositional-logic`.

And-Eliminations (∧e1, ∧e2)
---------------------------

And-Elimination1 (∧e1)
++++++++++++++++++++++

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 41

.. literalinclude:: and-elim1-pattern.txt
   :language: none
   :caption: **And-Elimination1 (∧e1) Schematic Pattern**
   :name: and-elim1-pattern

And-Elimination2 (∧e2)
++++++++++++++++++++++

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 42

.. literalinclude:: and-elim2-pattern.txt
   :language: none
   :caption: **And-Elimination2 (∧e2) Schematic Pattern**
   :name: and-elim2-pattern


Or-Introductions (∨i1, ∨i2)
---------------------------

Or-Introduction1 (∨i1)
++++++++++++++++++++++

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 43

.. literalinclude:: or-intro1-pattern.txt
   :language: none
   :caption: **Or-Introduction1 (∨i1) Schematic Pattern**
   :name: or-intro1-pattern

Or-Introduction1 (∨i2)
++++++++++++++++++++++

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 44

.. literalinclude:: or-intro2-pattern.txt
   :language: none
   :caption: **Or-Introduction2 (∨i2) Schematic Pattern**
   :name: or-intro2-pattern

.. _or-elim:

Or-Elimination (∨e)
-------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 45

The ∨e justification requires two sub-proofs as its second
and third arguments (referred by using their
proof step ``sNUM``\ ber).

.. literalinclude:: or-elim-pattern.txt
   :language: none
   :caption: **Or-Elimination (∨e) Schematic Pattern**
   :name: or-elim-pattern

Note that in the :ref:`or-elim-pattern` above,
assumptions ``Y11`` and ``Y21`` must be the first proof step in
their corresponding sub-proof.

However, ``Y1K`` and ``Y2K`` do not have to be the last proof
step. This allows the same sub-proofs to be used to "extract"
different claims (for example, see
`logika-examples/src/programming/conditional-1.logika's lines#43-44 <https://github.com/sireum/v3-logika-examples/blob/release/src/programming/conditional-1.logika#L43-L44>`__;
note that "ore" is an alias for ∨e).

Justification of
`conditional-1.logika's line#44 <https://github.com/sireum/v3-logika-examples/blob/release/src/programming/conditional-1.logika#L44>`__
leverages the following Logika alternative pattern for ∨e.

.. literalinclude:: or-elim-alt-pattern.txt
   :language: none
   :caption: **Alternative Or-Elimination (∨e) Schematic Pattern**
   :name: or-elim-alt-pattern

That is, the :ref:`or-elim-alt-pattern` actually
introduces a disjunction!

Note that this pattern is not so useful if
``Y11 ≡ Y1K`` (thus, ``P ≡ R1``) and
``Y21 ≡ Y2K`` (thus, ``Q ≡ R2``),
because then ``R ≡ P ∨ Q``, which is ``X``'s claim
(however, it is still a valid deduction).


Implication-Introduction (→i)
-----------------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 46

.. literalinclude:: imply-intro-pattern.txt
   :language: none
   :caption: **Implication-Introduction (→i) Schematic Pattern**
   :name: imply-intro-pattern


Implication-Elimination (→e)
----------------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 47

.. literalinclude:: imply-elim-pattern.txt
   :language: none
   :caption: **Implication-Elimination (→e) Schematic Pattern**
   :name: imply-elim-pattern

Negation-Introduction (¬i)
--------------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 48

.. literalinclude:: neg-intro-pattern.txt
   :language: none
   :caption: **Negation-Introduction (¬i) Schematic Pattern**
   :name: neg-intro-pattern

Negation-Elimination (¬e)
-------------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 49

.. literalinclude:: neg-elim-pattern.txt
   :language: none
   :caption: **Negation-Elimination (¬e) Schematic Pattern**
   :name: neg-elim-pattern

.. _bottom-elim:

⊥-Elimination  (⊥e)
-------------------

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 50

.. literalinclude:: bottom-elim-pattern.txt
   :language: none
   :caption: **⊥-Elimination (⊥e) Schematic Pattern**
   :name: bottom-elim-pattern


Proof-by-Contradiction (pbc)
----------------------------
.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 53, 51

.. literalinclude:: pbc-pattern.txt
   :language: none
   :caption: **Proof-by-Contradiction (pbc) Schematic Pattern**
   :name: pbc-elim-pattern

.. _prop-grammar:

Propositional Logic Input Language Grammar
==========================================

.. literalinclude:: propositional.txt
   :language: antlr
   :lines: 1 - 51
