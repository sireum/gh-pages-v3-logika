.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Logika Documentation &mdash; <a href="../index.html">3. The Logika Formal Input Language</a>
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   3.4. Programming Logic
   </b></big></big></big></big>
   </font>

.. _programming-language:

Programming Logic
*****************

Program
=======

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 1 - 11

Fact
====

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 13 - 29

Invariant
=========

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 31 - 33

Method Declaration
==================

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 35 - 58

Statement
=========

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 60 - 72

Variable Declaration
--------------------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 60 - 62, 26 - 29, 73 - 78, 98 - 101

Assignment
----------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 63, 73 - 78, 98 - 101

Assumption
----------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 64

Assertion
---------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 65

If-Else Conditional
-------------------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 66, 79 - 84

While-Loop
----------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 67, 85 - 97, 51 - 54

Method Invocation
-----------------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 68, 98 - 101

Sequence Element Assigment
--------------------------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 69, 73 - 78

Print
-----

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 70, 102 - 107


Sequent
-------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 71, 126 - 133

.. _proof-statement:

Proof
-----

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 227, 72, 136 - 154

Expression
==========

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 109 - 125

Extended Assume Step
====================

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 156 - 159
   :emphasize-lines: 2 - 4

Extended Claim Expression
=========================

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 161 - 195
   :emphasize-lines: 4 - 7, 10, 12 - 22, 26 - 28

Extended Justification and Inference Rules
==========================================

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 197 - 219
   :emphasize-lines: 18 - 23

Fact
----

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 225, 214

Invariant
---------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 225, 215

Subst1
------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 225, 216

Subst2
------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 225, 217

Algebra
-------

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 225, 218

.. _auto:

Auto
----

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 225, 219


Well-formed-ness
================


Programming Logic Input Language Grammar
========================================

Note that extended language elements from
that of the :ref:`pred-grammar` are highlighted.

.. literalinclude:: programming.txt
   :language: antlr
   :lines: 1 - 219
   :emphasize-lines: 157 - 159, 164 - 167, 170, 172 - 182, 186 - 188, 214 - 219
