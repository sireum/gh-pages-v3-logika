.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Logika Documentation &mdash; <a href="../index.html">3. The Logika Formal Input Language</a>
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   3.3. Predicate Logic
   </b></big></big></big></big>
   </font>

.. _predicate-language:

Predicate Logic
***************

The Logika predicate logic input language is a small
extension of its :ref:`propositional-language`
that adds the following language elements:
(1) :ref:`extended-assumptions`,
(2) :ref:`uninterpreted-functions`,
(3) :ref:`quantified-claims`, and
(4) :ref:`pred-rules`.

Similar to the discussion in :ref:`propositional-language`,
this section only discusses Logika's rendition of predicate
logic natural deductions;
the reader is referred to :ref:`predicate-logic` for more intuitive
and general discussion on predicate logic.

**Predicate Logic Input Language Grammar**

.. _predicate-1:

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 1

Logika's predicate logic input language is similar to that of
:ref:`propositional-language`, where it consists of a sequent and the sequent's proof.
Here is an example that is also a `syllogism <https://en.wikipedia.org/wiki/Syllogism>`__:

.. literalinclude:: predicate-1.logika
   :language: none

In the subsequent description, only language elements that are new
or extend :ref:`propositional-language` are discussed.
As a reference, the complete predicate logic input language is specified in
:ref:`pred-grammar`.

.. _extended-assumptions:

Extended Sub-Proof Assumption Step
==================================

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 28-30
   :emphasize-lines: 2 - 3

To support :ref:`pred-rules`, the sub-proof assumption form has to be
enhanced.

The first highlighted enhancement is to introduce a "fresh" variable
suitable for :ref:`forall-intro`;
here, "fresh" means that the identifier is not used in the
:ref:`scope <scoping>` of the variable; this form is a special one
because it is not a regular proof step which has a claim associated with it.

The second highlighted form also introduces a fresh variable, but also
has an associated claim assumption that refers to the fresh variable.
This form is used for :ref:`exists-elim`.


Extended Claim Expression
=========================

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 32 - 43
   :emphasize-lines: 4, 10 - 12

Similar to propositional logic's :ref:`prop-claim`,
the predicate logic claim expressions are untyped.
One can take the view that all variables in Logika's predicate logic
language are of integer type and
all predicates/functions accepts only integers and returns an integer, where
zero is treated as ``⊥`` and non-zero as ``⊤``.
Integers are desirable in this context instead of booleans because
it allows one to quantify over (infinitely) many objects
instead of only two.

At any rate, the claim expression language in Logika's
predicate logic has two additional kinds of expression:
(1) predicate/function applications, and (2) quantified claims,
as highlighted above, and described next.


.. _uninterpreted-functions:

First-Order Uninterpreted Predicate and Function Applications
-------------------------------------------------------------

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 65, 35, 10 - 11

A predicate is a function that returns either ``⊤`` or ``⊥``.
In predicate logic, the meaning of each function is unspecified,
thus, uninterpreted.

Instead of depending on function interpretations,
Logika's predicate logic reasoning uses
:ref:`rewriting/substitution <subst-notation>`, in addition to
:ref:`structural equivalence <structural-eq>` (``≡``)
that is used in propositional logic.
The rewriting technique depends on the inherent property that
each function is pure -- meaning that it produces the same result
when given the same arguments regardless of how many times
it is applied (invoked/called).

A function is applied by referring to its
identifier followed by some ordered arguments (optional)
which are separated by a comma (``,``) and delimited by a
parenthesis, such as shown in the
:ref:`syllogism <predicate-1>` example above (and below) for
``human`` and ``mortal``.

Functions have to always be supplied with arguments whenever
referred (i.e., they have to always be applied).
This makes it easy to distinguish whether an identifier is
a predicate, e.g.,:

.. literalinclude:: predicate-2.logika
   :language: none

In this popular syllogism,
``socrates`` is distinguishably a variable (intuitively, it points
to Socrates the person, which is mechanically modeled using
an integer object made up from ``1``\ s and ``0``\ s), but
``human`` and ``mortal`` are predicates (which intuitively,
classify whether an object is a human and a mortal, respectively).

In Logika, all functions are first-order, i.e., they
do not accept function values as arguments. Note that this
does not preclude functions to accepts results of other functions,
as illustrated in the following example:

.. literalinclude:: predicate-3.logika
   :language: none

As can be observed, the ``gt`` predicate can accepts results of
applying functions ``inc`` and ``dec``.
(By the way, the example uses uninterpreted functions/predicates
to model properties of integer arithmetic operators
due to the lack for
:ref:`algebra <algebra>` support in Logika's predicate logic;
instead, it is supported in :ref:`programming logic <programming-language>`
later.)

Furthermore, Logika functions cannot be overloaded;
each identifier is only associated with exactly
one signature.
In Logika's predicate logic, the signature is
only determined by the number of its arguments; hence,
each function has a fixed number of arguments.


.. _quantified-claims:

Universally and Existensially Quantified Claims
-----------------------------------------------

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 63, 41 - 43

Logika's quantification form can be used to quantify
over multiple variables at once (followed by the quantified
claim expression), which means the same as if one
quantifies over the variables one by one in the same order.
For example,
``∀x ∀y p(x,y)`` is semantically equivalent as ``∀x,y p(x,y)``;
however, for simplicity, they are not considered as structurally equivalent, i.e.,
``¬(∀x ∀y p(x,y) ≡ ∀x,y p(x,y))`` or ``∀x ∀y p(x,y) ≢ ∀x,y p(x,y)``.

.. _pred-well-formed:

Well-Formed-Ness
================

For simplicity, Logika does not allow identifier "shadowing",
which means that a variable cannot be quantified more than one time in the
same scope.
For example, ``∀x (… ∧ ∀x …)`` is ill-formed in Logika, but
``(∀x …)  ∧  (∀x …)`` is well-formed.

In general, ``x ∧ ∀x …`` is well-formed, because the first variable ``x`` is
different than the quantified variable ``x``.
The first ``x`` is a *free* variable because it is not
defined/quantified in the expression where it is referred,
while the second ``x`` is defined in the quantification.

However, to avoid confusion, Logika disallows such claim expression.
This is because, in the context of a sequent and its proof, all free variables
are actually *implicitly universally-quantified* (even for propositional logic).
In that sense, disallowing the same identifier used for as both free and quantified
is consistent with the restriction of disallowing identifier shadowing.

.. _subst-notation:

Abstract Notations and Substitution
===================================

One abstract notation that is used from now on is to express that a claim
``R`` that refers to some free variables (in the context of ``R`` itself)
such as ``a`` and ``b``, as: ``R{a,b}``.
In this notation, the order appearance of variables ``a`` and ``b``
do not matter.
For example, one can abstract ``∀x,y p(x,y))`` as ``∀x,y Q{x,y}`` or
``∀x,y Q{y,x}`` because both just say that the claim ``Q`` refers
to both ``x`` and ``y``.
Thus, in general, when defining a quantification, it is either one of the
following forms:
``∀a1,...,aN P{a1,...,aN}`` (universal), or
``∃a1,...,aN P{a1,...,aN}`` (existensial), where ``N > 0``.

Another notation is for expression substitution.
The notation ``[E2/E1]R`` means all occurences of expression
``E1`` in ``R`` is replaced with ``E2``; an easy way to remember
which one replaces which one is to read ``/`` as "steps over",
thus ``[E2/E1]R`` reads as ``E2`` steps over ``E1`` in ``R``.
Here is a concrete example of a substitution, ``[x/y]g(y) ≡ g(x)``.
Another example, ``[f(g(x))/f(y)]g(f(y), f(x)) ≡ g(f(g(x)), f(x))``.

The substitution notation is right-associative.
When multiple substitutions are done on an expression at the same time,
notated as: ``[E2_N/E1_N]…[E2_2/E1_2][E2_1/E1_1]R``, for ``N > 1`` --
it means, ``[E2_N/E1_N] (… ([E2_2/E1_2] ([E2_1/E1_1] R)))``.
For example, ``[z/y][y/x]x ≡ [z/y]([y/x]x) ≡ [z/y]y ≡ z``.

.. _pred-rules:

Quantified Claim Justification and Inference Rules
==================================================

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 45-61
   :emphasize-lines: 14 - 17

There are four new inference rules for Logika's predicate
logic -- one introduction rule and one elimination rule for
both universal and existensial quantifications.

The subsequent sections assume that
each rule is being applied at a regular proof step numbered ``Z``
and they use the :ref:`schematic-pattern` to characterize valid
inference rule applications.


.. _forall-intro:

Forall-Introduction (∀i)
------------------------

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 67, 58

.. literalinclude:: forall-intro-pattern.txt
   :language: none
   :caption: **Forall-Introduction (∀i) Schematic Pattern**
   :name: forall-intro-pattern

Note that ``x`` cannot appear in ``P{a}``; otherwise,
the proof violates the :ref:`pred-well-formed` rules
(i.e., such ``x`` in ``P{a}`` can only either be a free variable or
defined in an enclosing sub-proof, both of which are disallowed).

.. The following alternative pattern is used grouping multiple
   quantified variables in a single ∀-quantification.
   .. literalinclude:: forall-intro-alt-pattern.txt
      :language: none
      :caption: **Alternative Forall-Introduction (∀i) Schematic Pattern**
      :name: forall-intro-alt-pattern


Forall-Elimination (∀e)
-----------------------

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 67, 59

.. literalinclude:: forall-elim-pattern.txt
   :language: none
   :caption: **Forall-Elimination (∀e) Schematic Pattern**
   :name: forall-elim-pattern

.. The following pattern is used for eliminating multiple quantified
   variables at once.
   .. literalinclude:: forall-elim-alt-pattern.txt
      :language: none
      :caption: **Alternative Forall-Elimination (∀e) Schematic Pattern**
      :name: forall-elim-alt-pattern
   The following can be applied for nested ∀-quantifications.
   .. literalinclude:: forall-elim-alt2-pattern.txt
      :language: none
      :caption: **Alternative+1 Forall-Elimination (∀e) Schematic Pattern**
      :name: forall-elim-alt2-pattern
   There are actually infinitely many of such patterns according to the level
   of ∀-quantification nesting that is implemented in Logika (i.e., there exists
   **Alternative+**\ ``M`` **Forall-Elimination (∀e) Schematic Pattern**
   for any positive ``M``).


Exists-Introduction (∃i)
------------------------

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 67, 60

.. literalinclude:: exists-intro-pattern.txt
   :language: none
   :caption: **Exists-Introduction (∃i) Schematic Pattern**
   :name: exists-intro-pattern

.. .. literalinclude:: exists-intro-alt-pattern.txt
      :language: none
      :caption: **Alternative Exists-Introduction (∃i) Schematic Pattern**
      :name: exists-intro-alt-pattern
   .. literalinclude:: exists-intro-alt2-pattern.txt
      :language: none
      :caption: **Alternative+1 Exists-Introduction (∃i) Schematic Pattern**
      :name: exists-intro-alt2-pattern

.. _exists-elim:

Exists-Elimination (∃e)
-----------------------

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 67, 61

.. literalinclude:: exists-elim-pattern.txt
   :language: none
   :caption: **Exists-Elimination (∃e) Schematic Pattern**
   :name: exists-elim-pattern

.. .. literalinclude:: exists-elim-alt-pattern.txt
   :language: none
   :caption: **Alternative Exists-Elimination (∃e) Schematic Pattern**
   :name: exists-elim-alt-pattern


.. _pred-grammar:

Predicate Logic Input Language Grammar
======================================

Note that extended language elements from
that of the :ref:`prop-grammar` are highlighted.

.. literalinclude:: predicate.txt
   :language: antlr
   :lines: 1 - 61
   :emphasize-lines: 29 - 30, 35, 41 - 43, 43, 58 - 61
