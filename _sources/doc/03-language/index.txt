.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Logika Documentation
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   3. The Logika Formal Input Language
   </b></big></big></big></big>
   </font>

.. _language:

The Logika Formal Input Language
################################

The Logika input formal language are generally categorized into two:

* Proof language, for expressing formulae in propositional and predicate logics,
  as well as for expressing software contracts.

* Programming language, for expressing Logika programs.

There are common elements between the two categories (e.g., the expression language).
However, they may have some difference, thus,
it is convenient to be able to distinguish when the elements are in a certain context
by using "proof context" or "programming context".

The programming language is a simple procedural subset of the
`Scala programming language <http://scala-lang.org>`__.
The proof language is actually embedded in the programming language,
but they are easily distinguishable because of their reserved form that uses
Scala's *multi-line*
`string interpolation syntax <http://docs.scala-lang.org/overviews/core/string-interpolation.html>`__ --
more specifically, ``l"""{`` ... ``}"""``.
Here is an example to ponder:

.. literalinclude:: example.logika
   :language: scala

Let us first discuss the
:ref:`basic language elements<basic-language>` that are common to the two categories,
before proceeding to discuss the
:ref:`propositional <propositional-language>`,
:ref:`predicate <predicate-language>`, and
:ref:`programming <programming-language>` logic input languages.

----

.. toctree::
   :maxdepth: 3

   basic/index.rst
   propositional/index.rst
   predicate/index.rst
   programming/index.rst