.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Logika Documentation
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   2. IntelliJ-based Logika Integrated Verification Environment (LIVE)
   </b></big></big></big></big>
   </font>

.. _live:

IntelliJ-based Logika Integrated Verification Environment (LIVE)
################################################################

To aid the development of Logika proofs, you can use
the Sireum v3 IntelliJ plugin that includes LIVE.
Here is a screenshot:

.. image:: syntax-message.png
   :align: center
   :width: 80%

LIVE Features
*************

LIVE features mimic the typical features one would expect in a modern IDE.

----

* Syntax highlighting and error/warning reporting similar to most
  Integrated Development Environments (IDEs) for popular programming
  languages.

----

* Convenient keyboard shortcuts for inserting logical symbols that works
  for any editor file types.

----

* Verification engine running in the background to check proofs as you type.

----

* Can be used in conjunction with IntelliJ's
  `Scala Worksheet <https://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Worksheet>`__
  (``.sc`` files) or its Scala editor (``.scala`` files) to benefit from IntelliJ IDE features
  (e.g., the screenshot above illustrates how LIVE works with the Scala Worksheet).

----

LIVE Install
************

**Requirement:** LIVE requires **IntelliJ 15**.

.. note::



   After installing/updating LIVE, please update Logika as well
   (see :ref:`update`).

This step is optional as opening any Logika files during :ref:`live-examples` will cause
IntelliJ to suggest you to install the Sireum v3 IntelliJ plugin.
Thus, you can choose to skip directly to :ref:`live-examples`.

As a reference, below are the instructions to manually install LIVE from
`JetBrains' plugin repositories <https://plugins.jetbrains.com/plugin/8148>`__.

First, open IntelliJ's
`Preferences <https://www.jetbrains.com/idea/help/settings-preferences-dialog.html>`__
(shortcut: ``⌘,`` in OS X):

.. image:: install-from-jetbrains.png
   :scale: 40

1. Click on ``Plugins``.

2. Select ``Browse repositories...``.

3. Type ``sireum`` in the search text field of the newly displayed window.

4. Click ``Install`` and then click ``Restart`` IntelliJ.

Once restarted, LIVE adds a ``Sireum`` -> ``Logika`` sub-menu under the
`IntelliJ Tools menu <https://www.jetbrains.com/idea/help/menus-and-toolbars.html>`__.


Optional: Adobe's Source Code Pro Font
======================================

When working with Logika math Unicode symbols (see :ref:`shortcuts`),
it is best to use a font that is also (mostly) fixed-width for those symbols.

`Adobe's Source Code Pro <https://github.com/adobe-fonts/source-code-pro>`__
is one such font (it is also an excellent font for programming or other
purposes where a fixed-width font is desirable).

Follow the
`download and install instructions <https://github.com/adobe-fonts/source-code-pro/blob/master/README.md>`__,
and then set `IntelliJ's editor font <https://www.jetbrains.com/idea/help/configuring-colors-and-fonts.html>`__
to use it.


LIVE Update
***********

IntelliJ will notify you whenever there is a newer version of LIVE.
If accepted and LIVE is updated, you may also need to update Sireum v3's
command-line interface (see :ref:`update`).
LIVE tries to detect when Sireum v3 has not been updated and it would present
a nice reminder that you need to update Sireum.

.. image:: sireum-needs-updating.png
   :width: 30%

(In the future, this might be changed to a more automatic approach, e.g.,
by having LIVE to do the git pull and rebuild Sireum v3, or even removing
the manual step of setting up Sireum v3 via command-line first.)


.. _live-examples:

LIVE Examples
*************

To see how LIVE works,
open the `Logika examples repository <https://github.com/sireum/v3-logika-examples>`__
(which was cloned in :ref:`logika-examples`)
as an `IntelliJ project <https://www.jetbrains.com/idea/help/opening-reopening-and-closing-projects.html>`__.

If this is your first time opening the project, you need to
`configure the project SDK <https://www.jetbrains.com/idea/help/configuring-global-project-and-module-sdks.html>`__
(note: the SDK Type should be Java SDK), and point it to the ``sireum-v3/platform/java`` directory
(which was created during the process of :ref:`installing-logika`).

Opening any of the ``.logika`` files would:

----

* Syntax highlight the file document as shown in
  :ref:`the screenshot at the top of this page <live>`.

----

* Cause LIVE to ask for the Sireum v3 installation directory (if this is the first time).

  Just point it to ``sireum-v3`` (see :ref:`installing-logika`).

  If LIVE cannot confirm that the selected directory contains a working Sireum v3
  installation, it will display the following:

  .. image:: sireum-dir-invalid.png
     :scale: 75

  See :ref:`live-configuration` to adjust the settings.

----

* Display the Logika status icon the bottom-right corner of the IntelliJ project window
  `status bar <https://www.jetbrains.com/idea/help/status-bar.html>`__:

  .. image:: live-status-bar.png

  The presence of the Logika status icon indicates that the :ref:`Logika server <server>`
  is running/waiting in the background.

  The status icon animates when Logika has a pending work or is working in
  the background, and hovering the mouse cursor shows a tooltip of Logika's status.

  Clicking on the status icon will bring up a dialog that asks whether the server should
  be shutdown:

  .. image:: logika-server-shutdown.png
     :scale: 75

  Answering ``Yes`` will terminate the server and cause the status icon to disappear.

----

* Display a notification at the top-right corner that the ``.logika`` example is
  "Logika Verified":

  .. image:: logika-verified.png

----

That is, opening a ``.logika`` file (or a ``.lgk`` file) cause Logika to
automatically work on the file document.
As you edit the file, Logika will continually analyze it and give various
feedback such as syntax error marking (see :ref:`Effects <effect>`),
notification, etc.
(LIVE waits a certain amount of time after the file content is modified before
calling Logika; this "idle" wait time period can be :ref:`configured <live-configuration>`).

Working with Scala, Scala Worksheet, and Other Text Editors
===========================================================

LIVE can also be configured to work with other file types.
By default, it is :ref:`configured <live-configuration>` to also work with
`Scala Worksheet <https://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Scala+Worksheet>`__
``.sc`` files, which is an excellent tool for learning Scala.
Using ``.sc`` files allow one to test and prove Logika programs using the same editor.

You can :ref:`configure <live-configuration>` LIVE to work with ``.scala`` files to
benefit from, for example, its code folding feature, which is handy for hiding
proof claims that have been verified.

To have a better experience working with Logika programs using the Scala and Scala
Worksheet editors, it is best to configure Scala CodeStyle and Inspection

* Logika does not accept margin characters that can be stripped for its
  :ref:`proof statements <proof-statement>` that use multi-line strings.
  By default, IntelliJ is configured to insert margin characters and
  strip/insert margin on copy and paste.
  It is best to disable these features when working with Logika
  (see `Working with Strings in Scala <https://confluence.jetbrains.com/display/IntelliJIDEA/Working+with+Strings+in+Scala>`__).

* The IntelliJ Scala plugin defines some code inspections that are beneficial when
  programming Scala programs. A couple of these code inspections produce spurious
  warnings for Logika programs.
  Thus, it is best to disable them when working on Logika programs.
  The two code inspections can be found in the
  `IntelliJ's Editor Inspections <https://www.jetbrains.com/idea/help/disabling-and-enabling-inspections.html>`__
  settings under ``Scala`` -> ``General``:

  * ``Comparing unrelated types``:
    Logika uses arbitrary-precision integers (``scala.BigInt``, which is aliased as ``Z``
    in Logika) instead of using 32-bit ``Int``.
    IntelliJ gives a spurious warning when a variable of type ``Z`` (the alias) is
    compared with an ``Int`` literal (it does not give such warning if ``BigInt`` is used
    directly, but that is not supported in Logika).

  * ``Redundant Return``:
    Logika requires an explicit ``return`` keyword when a method returns a value (which
    can only be done at the end of the method, thus, in Scala, it is unnecessary).

Note that opening any configured files other than ``.logika`` or ``.lgk``
does not automatically cause LIVE to directly verify and monitor such files.
Instead one needs to explicitly :ref:`invoke Logika <live-action>` once.
Once invoked, LIVE will continue to monitor changes to the file document
similar to ``.logika`` or ``.lgk`` files.
If the editor is closed and reopened, Logika needs to be explicitly invoked once again.

.. _live-action:

LIVE Actions
************

There are three ways to explicitly bring Logika to LIVE:

----

* Triggering the menu item ``Tools`` -> ``Sireum`` -> ``Logika`` -> ``Logika Check``:

  .. image:: live-check-menuitem.png
     :scale: 60

----

* Right-clicking on the editor and selecting ``Logika Check``:

  .. image:: live-check-editor.png
     :scale: 60

----

* Using a :ref:`shortcut <shortcuts>`.

----

Note that these LIVE actions to verify file documents are only available for ``.logika``,
``.lgk`` and other file types that have been registered in :ref:`live-configuration`.


.. _shortcuts:

LIVE Shortcuts
**************

LIVE provides two main shortcuts:

----

* For invoking Logika to analyze an opened file document.
  The default keyboard shortcut is Shift-Command-L (``⇧⌘L``) when
  `Intelli's Keymap <https://www.jetbrains.com/idea/help/keymap.html>`__
  is set using one of the ``Mac OS X`` Keymaps (i.e., the keymap name
  contains ``Mac OS X``); otherwise, it is Shift-Control-L (``⇧⌃L``).

  This shortcut is only available for file types that have been registered in
  :ref:`live-configuration`.

----

* For inserting math Unicode symbols relevant for Logika.
  There are two keystrokes needed for a symbol insertion:

  1. The first keystroke is Shift-Command/Control-Semicolon (``⇧⌘;``/``⇧⌃;``)

  2. The second keystroke depends on which symbol to insert; below is a table
     of the shortcut, Unicode symbol and hexadecimal code, and its equivalent
     ASCII characters accepted by Logika.

     ====================== ============== ======== ==================================
     2\ :sup:`nd` Keystroke Unicode Symbol Hex Code Logika ASCII Equivalents
     ====================== ============== ======== ==================================
     ``T``                  ``⊤``          U+22A4   ``T``, ``true``
     ``F``                  ``⊥``          U+22A5   ``F``, ``_|_``, ``false``
     ``<`` or ``,``         ``≤``          U+2264   ``<=``
     ``>`` or ``.``         ``≥``          U+2265   ``>=``
     ``!`` or ``1``         ``≠``          U+2260   ``!=``
     ``N``                  ``¬``          U+00AC   ``!``, ``~``, ``not``
     ``^`` or ``6``         ``∧``          U+2227   ``&``, ``^``, ``and``
     ``V``                  ``∨``          U+2228   ``|``, ``V``, ``or``
     ``-``                  ``→``          U+21D2   ``->``, ``implies``
     ``A``                  ``∀``          U+2200   ``A``, ``all``, ``forall``
     ``E``                  ``∃``          U+2203   ``E``, ``some``, ``exists``
     ``|`` or ``\``         ``⊢``          U+22A2   ``|-``
     ====================== ============== ======== ==================================

     These symbol shortcuts are available for use in any text editor for any file types.

----

The keystrokes for the above shortcuts are the default keystrokes; they can be
configured in `IntelliJ's Keymap settings <https://www.jetbrains.com/idea/help/keymap.html>`__.


.. _live-configuration:

Sireum LIVE Configuration
*************************

Sireum and LIVE can be configured through
`IntelliJ's Settings/Preferences dialog <https://www.jetbrains.com/idea/help/settings-preferences-dialog.html>`__
under the `Tools <https://www.jetbrains.com/idea/help/tools.html>`__ category.

For all settings, the associated setting labels give a tooltip that describes the corresponding
settings when mouse hovered.
In some settings, checks are implemented to ensure validity of the settings.
An invalid setting is indicated by coloring the corresponding label red;
in such case, mouse hovering the input widget may give a description of
the expected format.


Sireum Settings
===============

.. image:: sireum-settings.png
   :scale: 60

----

* **Sireum v3 Directory**

  This setting can be used to (re-) enter the Sireum v3 directory, either
  by typing the absolute path to the directory or by using a file browser dialog
  that can be opened by clicking the ``...`` button.

  The entered path is checked to see whether it contains a working Sireum v3
  installation.

----

* **VM Arguments**

  Sireum tools such as Logika does not run directly inside the Java Virtual Machine
  (VM) instance that IntelliJ runs on.
  Instead, a VM is spawned, for example, for the Logika server in the background.

  This setting can be used to provide some VM arguments when spawning the VM.
  Each argument is separated by space(s) and each should start with a dash (``-``).
  By default, no VM arguments are specified.

  In the case where invalid VM arguments are specified, it would prevent
  spawning the Logika server; the plugin detects this situation and will revert
  the configuration to previous settings.

----

* **Environment Variables**

  Additional environment variables can be specified in the text area.
  By default, ``SIREUM_HOME`` is set to the Sireum v3 directory and cannot be overriden;
  it is required by Sireum tools to work properly
  (e.g., it is how Logika finds where Z3 is installed).

  The expected format is a key-value pair separated by an equal sign (``=``) per line.
  The key has to satisfy the following regular expression ``[a-zA-Z_][a-zA-Z0-9_]*``
  (i.e., a letter or an underscore, followed by zero or more letters, digits, or underscores).

----

LIVE Settings
=============

.. image:: live-settings.png
   :scale: 60

Some of the options such as auto mode, checking satisfiability, and timeout are
described in :ref:`cli-configuration`.
Below are the additional settings for LIVE.

----

* **Syntax Highlighting**

  The checkbox indicates whether LIVE should syntax highlight file documents.

----

* **File Extensions**

  The text field provides a way to configure which file types
  (based on their extension name) that LIVE actions should be enabled.

  By default, only Scala Worksheet ``.sc`` files are configured.
  One can add other files such as ``.scala`` and ``.txt`` files.

  The expected format is the file extension names separated by semicolon
  (whitespaces are ignored).

----

.. _effect:

* **Effects**

  This underwave effect checkbox controls how location-aware errors and
  warnings are marked in the editor.
  When selected, it uses the (more subtle) underwave effect typically used by
  IDEs to indicate ill-formed programs such as the following (compare it
  with the LIVE screenshot at :ref:`the top of this page <live>` that does
  not use the underwave effect):

  .. image:: error-underwave.png
     :scale: 70

  While more subtle, it comes with a red gutter icon on left hand side
  of the editor to help accentuate the marking.

  Regardless of which one, the error stripe on the right hand side also
  indicates the marking.

  Mouse hovering on any of the marker visualization will show a tooltip
  of the marker message.

----

* **Background Analysis and Idle Time**

  This setting is used to turn on/off the Logika automatic background
  analysis as file documents are modified.

  When turned off, the idle time is disabled (ignored), and one has to
  explicitly invoke Logika manually to verify file documents.

  If selected, the idle time can be configured on how many milliseconds
  LIVE should wait after a file document is modified before sending it
  to the background Logika server for analysis.

----

* **Hint Generation**

  Verifying programs can be challenging.
  To help with the process, Logika can generate some hints on the kind
  of program state claims can be made.
  If the hint generation is enabled, LIVE will mark locations
  where hints are available by using a bulb gutter editor icon.
  If clicked, it will open a view that gives the before/pre and
  after/post claims of the corresponding program location.
  For example,

  .. image:: live-hint.png
     :scale: 75

  when the bulb gutter icon associated with ``a(3) = 5`` is clicked,
  LIVE opens a window on the right hand side of the editor that displays
  the available pre/post claims that can be used as premises.
